openapi: '3.0.0'

# =============================================================================

info:
  title: 'Core Microservice'
  description: >
    Part of the **Seedy FIUBA Project** ([view it on GitHub](https://github.com/orgs/SeedyFiuba-G8/)).
  version: '1.0.0'

# =============================================================================

servers:
  - url: https://sf-tdp2-core.herokuapp.com/
    description: 'Production'
  - url: https://sf-tdp2-core-dev.herokuapp.com/
    description: 'Staging'
  - url: http://localhost:3000/
    description: 'Local development'

# =============================================================================

tags:
  - name: Projects

# =============================================================================

paths:
  # PROJECTS
  /projects:
    get:
      summary: Get all projects (optionally, of a specified user) ordered by creation date
      description: Get info from every project (of the app/of the user) ordered by creation date.
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            type: string
          description: The userId of whom we want to retrieve projects.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The number of projects to be retrieved.
        - in: query
          name: offset
          required: false
          schema:
            type: integer
          description: The number of projects we want to take as offset.
      tags:
        - Projects
      responses:
        200:
          $ref: '#/components/responses/getProjects'
        500:
          $ref: '#/components/responses/500'

    post:
      summary: Create a new project
      description: Allows an entrepeneur user to create a new project.
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/postProject'
      responses:
        200:
          $ref: '#/components/responses/postProject'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /projects/{projectId}:
    get:
      summary: Get a project by id.
      description: Allos a user to get retrieve a project's information by its id.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: uuid of the project to retrieve
      responses:
        200:
          $ref: '#/components/responses/getProject'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

    patch:
      summary: Modify the information of the project.
      description: Allows an owner of a project or an admin to modify the information of a project.
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/patchProject'
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: uuid of the project to modify
      responses:
        200:
          $ref: '#/components/responses/patchProject'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a project by id.
      description: Allows an owner of a project or an admin to delete a project.
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/userId'
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: uuid of the project to delete
      responses:
        200:
          $ref: '#/components/responses/deleteProject'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  # STATUS
  /health:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/health'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /ping:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/ping'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

# =============================================================================

components:
  # ---------------------------------------------------------------------------
  responses:
    # ERRORS
    400:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    409:
      description: Conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    415:
      description: Unsupported Media Type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    500:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # PROJECTS
    getProjects:
      description: Projects info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllProjects'

    getProject:
      description: Project info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'

    postProject:
      description: Project created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    patchProject:
      description: Project modified successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    deleteProject:
      description: Project deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    # STATUS
    health:
      description: Microservice general health state reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'

    ping:
      description: Server is active.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ping'

  # ---------------------------------------------------------------------------
  requestBodies:
    postProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostProjectData'

    patchProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchProjectData'

    userId:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserId'
  # ---------------------------------------------------------------------------
  schemas:
    # GENERAL
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            status:
              type: integer
            name:
              type: string
            message:
              type: string
            errors:
              type: object
            data:
              type: object
          required:
            - status
            - name
      required:
        - error

    # PROJECTS
    AllProjects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
      required:
        - projects

    Project:
      type: object
      properties:
        id:
          type: string
          example: '670b9562-b30d-52d5-b827-655787665500'
        userId:
          type: string
          example: '670b9562-b30d-52d5-b827-655787665500'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        publishedOn:
          type: string
          example: 'Sun Jun 06 2021 19:27:45 GMT-0300 (Argentina Standard Time)' #Date.toString()
        finalizedBy:
          type: string
          example: 'Sun Jun 06 2021 19:27:45 GMT-0300 (Argentina Standard Time)' #Date.toString()
      required:
        - id
        - userId
        - title
        - description
        - type
        - objective
        - country
        - city
        - publishedOn
        - finalizedBy

    PostProjectData:
      type: object
      properties:
        userId:
          type: string
          example: '670b9562-b30d-52d5-b827-655787665500'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          type: string
          example: 'Sun Jun 06 2021 19:27:45 GMT-0300 (Argentina Standard Time)' #Date.toString()
      required:
        - userId
        - title
        - description
        - type
        - objective
        - country
        - city
        - finalizedBy

    PatchProjectData:
      type: object
      properties:
        userId:
          type: string
          example: '670b9562-b30d-52d5-b827-655787665500'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          type: string
          example: 'Sun Jun 06 2021 19:27:45 GMT-0300 (Argentina Standard Time)' #Date.toString()
      required:
        - userId

    ProjectId:
      type: object
      properties:
        id:
          type: string
          example: '670b9562-b30d-52d5-b827-655787665500'
      required:
        - id

    UserId:
      type: object
      properties:
        userId:
          type: string
          example: '670b9562-b30d-52d5-b827-655787665500'

    # STATUS
    Ping:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
      required:
        - status

    Health:
      type: object
      properties:
        database:
          type: string
          example: 'UP'
      required:
        - database
#
# =============================================================================
