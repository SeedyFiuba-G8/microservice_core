openapi: '3.0.0'

# =============================================================================

info:
  title: 'Core Microservice'
  description: >
    Part of the **Seedy FIUBA Project** ([view it on GitHub](https://github.com/orgs/SeedyFiuba-G8/)).
  version: '1.0.0'

# =============================================================================

servers:
  - url: https://sf-tdp2-core.herokuapp.com/
    description: 'Production'
  - url: https://sf-tdp2-core-dev.herokuapp.com/
    description: 'Staging'
  - url: http://localhost:3002/
    description: 'Local development'

# =============================================================================

tags:
  - name: Projects
  - name: Reviewers
  - name: Wallets
  - name: Metrics
  - name: Status

# =============================================================================

security:
  - ApiKeyAuth: []

# =============================================================================

paths:
  # PROJECTS
  /projects:
    get:
      summary: Get all projects (optionally, of a specified user) ordered by creation date
      description: Get info from every project (of the app/of the user) ordered by creation date.
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The userId of whom we want to retrieve projects.
        - in: query
          name: lat
          required: false
          schema:
            $ref: '#/components/schemas/Coordinate'
          description: Latitude.
        - in: query
          name: long
          required: false
          schema:
            $ref: '#/components/schemas/Coordinate'
          description: Longitude.
        - in: query
          name: radius
          required: false
          schema:
            type: number
            example: 6.7
          description: Distance radius in km.
        - in: query
          name: reviewerId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The id of the reviewer of whom we want to retrieve projects.
        - in: query
          name: recommended
          required: false
          schema:
            $ref: '#/components/schemas/Boolean'
          description: Fetch only recommendations.
        - in: query
          name: interests
          required: false
          schema:
            $ref: '#/components/schemas/Interests'
          description: User interests to get recommendations.
        - in: query
          name: blocked
          required: false
          schema:
            $ref: '#/components/schemas/Boolean'
          description: Whether the project is blocked or not.
        - in: query
          name: type
          required: false
          schema:
            type: string
            example: 'social'
          description: Type of project to retrieve.
        - in: query
          name: tags
          required: false
          schema:
            $ref: '#/components/schemas/Tags'
          description: Tags of project to retrieve.
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/ProjectStatus'
          description: Status of project to retrieve.
        - in: query
          name: onlyFavorites
          required: false
          schema:
            $ref: '#/components/schemas/Boolean'
          description: Flag to retrieve only favorite projects.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The number of projects to be retrieved.
        - in: query
          name: offset
          required: false
          schema:
            type: integer
          description: The number of projects we want to take as offset.
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      tags:
        - Projects
      responses:
        200:
          $ref: '#/components/responses/getProjects'
        default:
          $ref: '#/components/responses/Error'

    post:
      summary: Create a new project
      description: Allows an entrepeneur user to create a new project.
      tags:
        - Projects
      parameters:
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that requests
      requestBody:
        $ref: '#/components/requestBodies/postProject'
      responses:
        200:
          $ref: '#/components/responses/postProject'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}:
    get:
      summary: Get a project by id
      description: Allows a user to retrieve a project's information by its id.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to retrieve
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      responses:
        200:
          $ref: '#/components/responses/getProject'
        default:
          $ref: '#/components/responses/Error'

    patch:
      summary: Modify the information of the project
      description: Allows an owner of a project or an admin to modify >
       the information of a project. Allows a reviewer of a project to >
       mark stage(s) as completed, by patching lastCompletedStage.
      tags:
        - Projects
      parameters:
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that requests
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to modify
      requestBody:
        $ref: '#/components/requestBodies/patchProject'
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: uuid of the project to modify
      responses:
        200:
          $ref: '#/components/responses/patchProject'
        default:
          $ref: '#/components/responses/Error'

    delete:
      summary: Delete a project by id
      description: Allows an owner of a project or an admin to delete a project.
      tags:
        - Projects
      parameters:
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that requests
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to delete
      responses:
        200:
          $ref: '#/components/responses/deleteProject'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}/funds:
    post:
      summary: Fund a project
      description: Allows a user to fund a project.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to fund
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that wants to fund the project
      requestBody:
        $ref: '#/components/requestBodies/fundProjectData'
      responses:
        200:
          $ref: '#/components/responses/fundProject'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}/block:
    post:
      summary: Block a project
      description: Allow admins to block projects.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to block
      responses:
        204:
          description: 'Project blocked successfully.'
        default:
          $ref: '#/components/responses/Error'

    delete:
      summary: Unblock a user
      description: Allow admins to unblock projects.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to block
      responses:
        204:
          description: 'Project unblocked successfully.'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}/like:
    post:
      summary: Like a project
      description: Allow users to like projects.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      responses:
        204:
          description: 'Project liked successfully.'
        default:
          $ref: '#/components/responses/Error'

    delete:
      summary: Dislike a project
      description: Allow users to dislike projects.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      responses:
        204:
          description: 'Project disliked successfully.'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}/rating:
    put:
      summary: Rate a project
      description: Allow users to rate projects.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      requestBody:
        $ref: '#/components/requestBodies/putRatingRequest'
      responses:
        204:
          description: 'Project rated successfully.'
        default:
          $ref: '#/components/responses/Error'

  # REVIEWERS
  /reviewrequests/{reviewerId}:
    get:
      summary: Get review requests for a given reviewer
      description: Allows a reviewer to retrieve its review requests.
      tags:
        - Reviewers
      parameters:
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that requests
        - in: path
          name: reviewerId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the reviewer
      responses:
        200:
          $ref: '#/components/responses/getReviewRequests'
        default:
          $ref: '#/components/responses/Error'
  
  /reviewrequests/{reviewerId}/{projectId}:
    put:
      summary: Change status of review request
      description: Allows a reviewer to change the status of its review requests.
      tags:
        - Reviewers
      parameters:
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that requests
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project
        - in: path
          name: reviewerId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the reviewer
      requestBody:
        $ref: '#/components/requestBodies/putReviewRequest'
      responses:
        204:
          description: 'Review request updated successfully.'
        default:
          $ref: '#/components/responses/Error'

  # METRICS
  /metrics:
    get:
      summary: Get basic metrics
      description: Get metrics from projects.
      tags:
        - Metrics
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The userId of whom we want to retrieve metrics.
      responses:
        200:
          $ref: '#/components/responses/getBasicMetrics'
        default:
          $ref: '#/components/responses/Error'

  /metrics/events:
    get:
      summary: Get event metrics
      description: Get event metrics from projects.
      tags:
        - Metrics
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The userId of whom we want to retrieve metrics.
        - in: query
          name: initialDate
          required: true
          schema:
            $ref: '#/components/schemas/Date'
          description: Initial date to retrieve metrics.
        - in: query
          name: finalDate
          required: false
          schema:
            $ref: '#/components/schemas/Date'
          description: Final date to retrieve metrics.
      responses:
        200:
          $ref: '#/components/responses/getEventMetrics'
        default:
          $ref: '#/components/responses/Error'

  # WALLETS
  /wallets:
    post:
      summary: Create a new wallet
      description: Allows a user to create a new wallet.
      tags:
        - Wallets
      requestBody:
        $ref: '#/components/requestBodies/postWalletData'
      responses:
        201:
          $ref: '#/components/responses/postWallet'
        default:
          $ref: '#/components/responses/Error'

  /wallets/{userId}:
    get:
      summary: Get a wallet by its user id
      description: Allows a user to retrieve a wallet's information by its id.
      tags:
        - Wallets
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: id of the user whom wallet we want to retrieve
      responses:
        200:
          $ref: '#/components/responses/getWallet'
        default:
          $ref: '#/components/responses/Error'

  /wallets/{walletAddress}/funds:
    post:
      summary: Transfer funds to an external wallet
      description: Allows a user to transfer funds to walletAddress.
      tags:
        - Wallets
      parameters:
        - in: path
          name: walletAddress
          schema:
            $ref: '#/components/schemas/Address'
          required: true
          description: address of the wallet we want to transfer funds
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user that wants to transfer the funds
      requestBody:
        $ref: '#/components/requestBodies/transferFunds'
      responses:
        200:
          $ref: '#/components/responses/transferFunds'
        default:
          $ref: '#/components/responses/Error'

  /users/{userId}/fundings:
    get:
      summary: Get the project fundings made by a user
      description: Allows a user to retrieve a the project funding information of a user by its id.
      tags:
        - Wallets
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: id of the user whose project fundings we want to retrieve
      responses:
        200:
          $ref: '#/components/responses/getWalletFundings'
        default:
          $ref: '#/components/responses/Error'

  /users/{userId}/pushToken:
    post:
      summary: Post a user's expo push notification token
      description: Allows a user to post a user's expo push notification token.
      tags:
        - Notifications
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: id of the user whose token we want to post
      requestBody:
        $ref: '#/components/requestBodies/pushTokenData'
      responses:
        200:
          $ref: '#/components/responses/pushToken'
        default:
          $ref: '#/components/responses/Error'

    delete:
      summary: Remove a user's token
      description: Allows a user to remove its push notifications token
      tags:
        - Notifications
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: id of the user whose token we want to remove
        - in: header
          name: expo-token
          schema:
            $ref: '#/components/schemas/ExpoToken'
          description: push expoToken of the user
      responses:
        200:
          description: 'Token removed successfully.'
        default:
          $ref: '#/components/responses/Error'

  /users/{userId}/message:
    post:
      summary: Post a notification message to a user
      description: Allows a user to post a expo message push notification to another user.
      tags:
        - Notifications
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: id of the user who will receive the notification message
      requestBody:
        $ref: '#/components/requestBodies/pushMessageData'
      responses:
        200:
          $ref: '#/components/responses/pushMessage'
        default:
          $ref: '#/components/responses/Error'

  /users/fundings:
    get:
      summary: Get the project fundings made by a user
      description: Allows a user to retrieve all project funding information.
      tags:
        - Wallets
      responses:
        200:
          $ref: '#/components/responses/getAllFundings'
        default:
          $ref: '#/components/responses/Error'
  
  # STATUS
  /info:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/info'
        default:
          $ref: '#/components/responses/Error'

  /health:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/health'
        default:
          $ref: '#/components/responses/Error'

  /ping:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/ping'
        default:
          $ref: '#/components/responses/Error'

# =============================================================================

components:
  # ---------------------------------------------------------------------------
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  # ---------------------------------------------------------------------------
  requestBodies:
    fundProjectData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostFundsData'

    postProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostProjectData'

    patchProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchProjectData'
    
    putReviewRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutReviewRequest'

    putRatingRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutRatingRequest'

    postWalletData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostWalletData'

    transferFunds:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostFundsData'

    pushMessageData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PushMessageData'

    pushTokenData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PushTokenData'
  # ---------------------------------------------------------------------------
  responses:
    Error:
      description: >
        An error has occured. Check response body for more
        information about what happened.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # PROJECTS
    fundProject:
      description: Transaction initiated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TxHash'

    getProjects:
      description: Projects info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllProjects'

    getProject:
      description: Project info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'

    postProject:
      description: Project created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    patchProject:
      description: Project modified successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    deleteProject:
      description: Project deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    # REVIEWERS
    getReviewRequests:
      description: Review requests retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReviewRequests'

    # WALLETS
    getWallet:
      description: Wallet retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Wallet'

    postWallet:
      description: Wallet created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Address'

    getWalletFundings:
      description: Wallet fundings retrieved successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fundings'

    getAllFundings:
      description: Fundings retrieved successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fundings'

    transferFunds:
      description: Funds transferring transaction initialized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TxHash'

    pushToken:
      description: Token registered successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Id'

    pushMessage:
      description: Message pushed successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Id'
    
    # METRICS
    getBasicMetrics:
      description: Metrics retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicMetrics'

    getEventMetrics:
      description: Metrics retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventMetrics'
    
    # STATUS
    info:
      description: Microservice general info reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Info'

    health:
      description: Microservice general health state reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'

    ping:
      description: Server is active.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ping'

  # ---------------------------------------------------------------------------
  schemas:
    # GENERAL
    Error:
      type: object
      properties:
        status:
          type: integer
        name:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            type: object
      required:
        - status
        - name
    
    Address:
      type: string
      example: '0xf018Be4Fe4fBD4cA1B1162A44bB139a343C2087b'

    Boolean:
      type: boolean
      example: false

    Coordinate:
      type: number
      example: 38.8951
    
    Date:
      type: string
      format: date-time
      example: '2021-06-13T21:29:29.330Z'


    ETHAmount:
      type: number
      example: 0.000001

    Id:
      type: string
      format: uuid
      example: '123e4567-e89b-12d3-a456-426614174000'

    Interests:
      type: array
      items:
        type: string
      example: ['music', 'entertainment', 'productivity']

    Picture:
      type: string
      example: 'https://imgur.com/gallery/rFvivtw'

    Rated:
      type: integer
      example: 3

    Rating:
      type: object
      properties:
        samples: 
          type: integer
          example: 25
        mean:
          type: number
          example: 3.6
      required:
        - samples
        - mean

    Stage:
      type: object
      properties:
        cost:
          $ref: '#/components/schemas/ETHAmount'
        description:
          type: string
          example: 'In this stage, we will buy the equipment.'
    
    StageId:
      type: integer
      example: 1

    Stages:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
      minItems: 1

    Hash:
      type: string
      example: '0x30b003c570eccaf1705acd4621f72993acb51715f8decbf61535f21376cfe1d2'

    ExpoToken:
      type: string
      example: 'ExponentPushToken[AbCdEfGHO1YJKlm_NStuvw]'

    # PROJECTS
    AllProjects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPreview'
      required:
        - projects

    PostFundsData:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/ETHAmount'
      required:
        - amount

    Project:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        blocked:
          $ref: '#/components/schemas/Boolean'
        userId:
          $ref: '#/components/schemas/Id'
        reviewerId:
          $ref: '#/components/schemas/Id'
        liked:
          $ref: '#/components/schemas/Boolean'
        likes:
          type: integer
          example: 345
        rating:
          $ref: '#/components/schemas/Rating'
        rated:
          $ref: '#/components/schemas/Rated'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        lat:
          $ref: '#/components/schemas/Coordinate'
        long:
          $ref: '#/components/schemas/Coordinate'
        publishedOn:
          $ref: '#/components/schemas/Date'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        reviewers:
          $ref: '#/components/schemas/Reviewers'
        stages:
          $ref: '#/components/schemas/Stages'
        totalFunded:
          $ref: '#/components/schemas/ETHAmount'
        currentStage:
          $ref: '#/components/schemas/StageId'
        contributors:
          type: integer
          example: 2
          description: Number of distinct users that contributed to the project.
        contributions:
          type: integer
          example: 5
          description: Number of contributions made to the project.
      required:
        - id
        - status
        - blocked
        - userId
        - liked
        - likes
        - rating
        - rated
        - title
        - description
        - type
        - objective
        - publishedOn
        - finalizedBy
        - tags
        - stages
        - totalFunded
        - currentStage
        - contributors
        - contributions

    ProjectPreview:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        blocked:
          $ref: '#/components/schemas/Boolean'
        liked:
          $ref: '#/components/schemas/Boolean'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        lat:
          $ref: '#/components/schemas/Coordinate'
        long:
          $ref: '#/components/schemas/Coordinate'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        stages:
          $ref: '#/components/schemas/Stages'
        totalFunded:
          $ref: '#/components/schemas/ETHAmount'
        currentStage:
          $ref: '#/components/schemas/StageId'
        contributors:
          type: integer
          example: 2
          description: Number of distinct users that contributed to the project.
        contributions:
          type: integer
          example: 5
          description: Number of contributions made to the project.
      required:
        - id
        - status
        - blocked
        - title
        - description
        - type
        - objective
        - finalizedBy
        - tags
        - stages
        - totalFunded
        - currentStage
        - contributors
        - contributions

    PostProjectData:
      type: object
      properties:
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        lat:
          $ref: '#/components/schemas/Coordinate'
        long:
          $ref: '#/components/schemas/Coordinate'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        reviewers:
          $ref: '#/components/schemas/ReviewersRaw'
        stages:
          $ref: '#/components/schemas/Stages'
      required:
        - title
        - description
        - type
        - objective
        - finalizedBy
        - tags
        - reviewers
        - stages

    PatchProjectData:
      type: object
      properties:
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        status:
          $ref: '#/components/schemas/FundingProjectStatus'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        reviewers:
          $ref: '#/components/schemas/ReviewersRaw'
        stages:
          $ref: '#/components/schemas/Stages'
        lastCompletedStage:
          $ref: '#/components/schemas/StageId'
      minProperties: 1

    ProjectId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required:
        - id
      
    ProjectStatus:
      type: string
      enum:
        - DRAFT
        - FUNDING
        - IN_PROGRESS
        - COMPLETED

    FundingProjectStatus:
      type: string
      enum:
        - FUNDING
    
    Tags:
      type: array
      items:
        type: string
      example: ['javascript', 'python', 'food']

    TxHash:
      type: object
      properties:
        txHash:
          $ref: '#/components/schemas/Hash'
      required:
        - txHash
    
    # REVIEWERS
    Reviewer:
      type: object
      properties:
        reviewerId:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ReviewerStatus'  
      required:
        - reviewerId
        - status

    Reviewers:
      type: array
      items:
        $ref: '#/components/schemas/Reviewer'

    ReviewersRaw:
      type: array
      items:
        $ref: '#/components/schemas/Id'

    ReviewerStatus:
      type: string
      enum:
        - PENDING
        - ACCEPTED
        - REJECTED
    
    PutReviewerStatus:
      type: string
      enum:
        - ACCEPTED
        - REJECTED

    ReviewRequests:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/ReviewRequest'
      required:
        - requests

    ReviewRequest:
      type: object
      properties:
        projectId:
          $ref: '#/components/schemas/Id'
        userId:
          $ref: '#/components/schemas/Id'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        lat:
          $ref: '#/components/schemas/Coordinate'
        long:
          $ref: '#/components/schemas/Coordinate'
        publishedOn:
          $ref: '#/components/schemas/Date'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        status:
          $ref: '#/components/schemas/ReviewerStatus'
        stages:
          $ref: '#/components/schemas/Stages'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        projectStatus:
          $ref: '#/components/schemas/ProjectStatus'
        currentStage:
          $ref: '#/components/schemas/StageId'
        totalFunded:
          $ref: '#/components/schemas/ETHAmount'
        contributors:
          type: integer
          example: 2
          description: Number of distinct users that contributed to the project.
        contributions:
          type: integer
          example: 5
          description: Number of contributions made to the project.
      required:
        - projectId
        - userId
        - title
        - description
        - type
        - objective
        - publishedOn
        - finalizedBy
        - status
        - stages
        - projectStatus
        - currentStage
        - totalFunded
        - contributors
        - contributions

    PutRatingRequest:
      type: object
      properties:
        rating:
          type: integer
          example: 4
      required:
        - rating
    
    PutReviewRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PutReviewerStatus'  
      required:
        - status

    # WALLETS
    Wallet:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        balance:
          $ref: '#/components/schemas/ETHAmount'
      required:
        - address
        - balance

    PostWalletData:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/Id'
      required:
        - uid

    Funding:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/Id'
        txHash:
          $ref: '#/components/schemas/Hash'
        projectId:
          $ref: '#/components/schemas/Id'
        amount:
          $ref: '#/components/schemas/ETHAmount'
        date:
          $ref: '#/components/schemas/Date'
      required:
        - userId
        - txHash
        - projectId
        - amount
        - date

    Fundings:
      type: array
      items:
        $ref: '#/components/schemas/Funding'

    PushTokenData:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/ExpoToken'
      required:
        - token

    PushMessageData:
      type: object
      properties:
        message:
          type: string
          example: 'Hola! Como va?'
        fromUser:
          type: string
          example: 'Juan Perez'
      required:
        - message
        - fromUser
    
    # METRICS
    BasicMetrics:
      type: object
      properties:
        total:
          type: integer
          example: 6045
        draft:
          type: integer
          example: 2014
        funding:
          type: integer
          example: 2000
        inProgress:
          type: integer
          example: 2031
        completed:
          type: integer
          example: 2031
      required:
        - total
        - draft
        - funding
        - inProgress
        - completed

    EventMetrics:
      type: object
      properties:
        create:
          type: integer
          example: 223
        publish:
          type: integer
          example: 54
      required:
        - create
        - publish
    
    # STATUS
    Info:
      type: object
      properties:
        creationDate:
          $ref: '#/components/schemas/Date'
        description:
          type: string
          example: 'Service description!'
      required:
        - creationDate
        - description

    Ping:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
      required:
        - status

    Health:
      type: object
      properties:
        database:
          type: string
          example: 'UP'
      required:
        - database
#
# =============================================================================
